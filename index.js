// Generated by CoffeeScript 1.10.0
(function() {
  var ADD, DELETE, SQLiteDataStorage, sqlite3;

  sqlite3 = require('sqlite3');

  ADD = 'ADD';

  DELETE = 'DELETE';

  SQLiteDataStorage = (function() {
    function SQLiteDataStorage(dbname, opt_mode) {
      this.db = !!opt_mode ? new sqlite3.Database(dbname, opt_mode) : new sqlite3.Database(dbname);
    }

    SQLiteDataStorage.prototype.addStore = function(storeName, callback) {
      return this.db.run("CREATE TABLE " + storeName + " (id INTEGER PRIMARY KEY AUTOINCREMENT, key TEXT, type TEXT, value TEXT)", (function(_this) {
        return function(errorOrNull) {
          if (!!errorOrNull) {
            return callback(errorOrNull);
          } else {
            return _this.db.run("CREATE INDEX " + storeName + "_KEY_INDEX on " + storeName + " (key)", function(errorOrNull) {
              return callback(null);
            });
          }
        };
      })(this));
    };

    SQLiteDataStorage.prototype.addStoreRecord = function(storeName, key, value, callback) {
      return this.db.run("INSERT INTO " + storeName + " (key, type, value) VALUES (?,?,?)", [key, ADD, value], callback);
    };

    SQLiteDataStorage.prototype.deleteStoreRecord = function(storeName, key, callback) {
      return this.db.run("INSERT INTO " + storeName + " (key, type) VALUES (?,?)", [key, DELETE], callback);
    };

    SQLiteDataStorage.prototype.getStoreRecord = function(storeName, key, callback) {
      return this.db.all("SELECT type, value FROM " + storeName + " WHERE key=?", [key], function(errorOrNull, maybeRows) {
        if (!!errorOrNull) {
          return callback(errorOrNull);
        }
        if (!!maybeRows && maybeRows.length === 1 && maybeRows[0].type === ADD) {
          return callback(null, maybeRows[0].value);
        } else {
          return callback(new Error("not found"));
        }
      });
    };

    SQLiteDataStorage.prototype.getStoreChanges = function(storeName, after, callback) {
      return this.db.all("SELECT * FROM " + storeName + " WHERE id>?", [after], callback);
    };

    return SQLiteDataStorage;

  })();

  module.exports = {
    newSQLiteDataStorage: function(dbname, opt_mode) {
      return new SQLiteDataStorage(dbname, opt_mode);
    }
  };

}).call(this);
