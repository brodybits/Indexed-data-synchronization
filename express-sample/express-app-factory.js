// Generated by CoffeeScript 1.10.0
(function() {
  var DEFAULT_DB_NAME, DEFAULT_STORE_NAME, bodyParser, express, factory, promisify, start;

  factory = require('../sqlite-data-storage-factory.js');

  express = require('express');

  bodyParser = require('body-parser');

  promisify = require('promisify-node');

  DEFAULT_DB_NAME = ':memory:';

  DEFAULT_STORE_NAME = 'MyStore';

  start = function(dbname, storeName) {
    var app, db, db1;
    if (dbname == null) {
      dbname = DEFAULT_DB_NAME;
    }
    if (storeName == null) {
      storeName = DEFAULT_STORE_NAME;
    }
    app = express();
    app.use(bodyParser.json());
    db1 = factory.newSQLiteDataStorage(dbname);
    db = promisify(db1, void 0, true);
    db.addStore(storeName);
    app.post('/echoBody', function(req, res) {
      return res.send(req.body);
    });
    app.post('/add', function(req, res) {
      var b;
      b = req.body;
      return db.addStoreRecord(storeName, b.key, b.value).then(function() {
        res.status(200);
        return res.send();
      }, function(error) {
        res.status(400);
        return res.send();
      });
    });
    app.post('/delete', function(req, res) {
      var b;
      b = req.body;
      return db.deleteStoreRecord(storeName, b.key).then(function() {
        res.status(200);
        return res.send();
      }, function(error) {
        res.status(400);
        return res.send();
      });
    });
    app.get('/get', function(req, res) {
      var b;
      b = req.body;
      return db.getStoreRecord(storeName, b.key).then(function(value) {
        return res.send(value);
      }, function(error) {
        res.status(400);
        return res.send();
      });
    });
    return app.get('/changes', function(req, res) {
      var b;
      b = req.body;
      return db.getStoreChanges(storeName, b.after).then(function(changes) {
        return res.send(changes);
      }, function(error) {
        res.status(400);
        return res.send();
      });
    });
  };

  module.exports = start;

}).call(this);
