// Generated by CoffeeScript 1.10.0
(function() {
  var ADD, DELETE, newSQLiteDataStorage, newSQLiteDataStorageWrapper, sqlite3;

  sqlite3 = require('sqlite3');

  ADD = 'ADD';

  DELETE = 'DELETE';

  newSQLiteDataStorageWrapper = function(db) {
    return {
      addStore: function(storeName, callback) {
        db.run("CREATE TABLE " + storeName + " (id INTEGER PRIMARY KEY AUTOINCREMENT, key TEXT, type TEXT, value TEXT)", function(errorOrNull) {
          if (!!errorOrNull) {
            return callback(errorOrNull);
          } else {
            return db.run("CREATE INDEX " + storeName + "_KEY_INDEX on " + storeName + " (key)", function(errorOrNull) {
              return callback(null);
            });
          }
        });
      },
      addStoreRecord: function(storeName, key, value, callback) {
        db.run("INSERT INTO " + storeName + " (key, type, value) VALUES (?,?,?)", [key, ADD, value], callback);
      },
      deleteStoreRecord: function(storeName, key, callback) {
        db.run("INSERT INTO " + storeName + " (key, type) VALUES (?,?)", [key, DELETE], callback);
      },
      getStoreRecord: function(storeName, key, callback) {
        db.all("SELECT type, value FROM " + storeName + " WHERE key=?", [key], function(errorOrNull, maybeRows) {
          if (!!errorOrNull) {
            return callback(errorOrNull);
          }
          if (!!maybeRows && maybeRows.length === 1 && maybeRows[0].type === ADD) {
            return callback(null, maybeRows[0].value);
          } else {
            return callback(new Error("not found"));
          }
        });
      },
      getStoreChanges: function(storeName, after, callback) {
        return db.all("SELECT * FROM " + storeName + " WHERE id>?", [after], callback);
      }
    };
  };

  newSQLiteDataStorage = function(dbname, opt_mode) {
    return newSQLiteDataStorageWrapper(!!opt_mode ? new sqlite3.Database(dbname, opt_mode) : new sqlite3.Database(dbname));
  };

  module.exports = {
    newSQLiteDataStorage: newSQLiteDataStorage
  };

}).call(this);
