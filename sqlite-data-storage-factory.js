// Generated by CoffeeScript 1.10.0
(function() {
  var ADD, DELETE, newSQLiteDataStorage, newSQLiteDataStorageWrapper, sqlite3;

  sqlite3 = require('sqlite3');

  ADD = 'ADD';

  DELETE = 'DELETE';

  newSQLiteDataStorageWrapper = function(db) {
    return {
      addStore: function(storeName, callback) {
        db.run("CREATE TABLE " + storeName + " (change_id INTEGER PRIMARY KEY AUTOINCREMENT, change_type TEXT," + " record_key TEXT, index_values TEXT, record_value TEXT)", function(errorOrNull) {
          if (!!errorOrNull) {
            return callback(errorOrNull);
          } else {
            return db.run("CREATE INDEX " + storeName + "_KEY_INDEX on " + storeName + " (record_key)", function(errorOrNull) {
              return callback(null);
            });
          }
        });
      },
      addStoreRecord: function(storeName, record_key, index_values, record_value, callback) {
        var stored_index_values;
        stored_index_values = !!index_values ? JSON.stringify(index_values) : [];
        db.run("INSERT INTO " + storeName + " (change_type, record_key, index_values, record_value) VALUES (?,?,?,?)", [ADD, record_key, stored_index_values, record_value], callback);
      },
      deleteStoreRecord: function(storeName, record_key, callback) {
        db.run("INSERT INTO " + storeName + " (change_type, record_key) VALUES (?,?)", [DELETE, record_key], callback);
      },
      getStoreRecordValue: function(storeName, record_key, callback) {
        db.all("SELECT change_type, record_value FROM " + storeName + " WHERE record_key=?", [record_key], function(errorOrNull, maybeRows) {
          if (!!errorOrNull) {
            return callback(errorOrNull);
          }
          if (!!maybeRows && maybeRows.length === 1 && maybeRows[0].change_type === ADD) {
            return callback(null, maybeRows[0].record_value);
          } else {
            return callback(new Error("not found"));
          }
        });
      },
      getStoreChanges: function(storeName, after, callback) {
        db.all("SELECT * FROM " + storeName + " WHERE change_id>?", [after], function(errorOrNull, maybeRows) {
          var changes, i, len, my_index_values, row;
          if (!!errorOrNull) {
            return callback(errorOrNull);
          }
          changes = [];
          for (i = 0, len = maybeRows.length; i < len; i++) {
            row = maybeRows[i];
            my_index_values = !!row.index_values && row.index_values.length !== 0 ? JSON.parse(row.index_values) : [];
            changes.push({
              change_id: row.change_id,
              change_type: row.change_type,
              record_key: row.record_key,
              index_values: my_index_values,
              record_value: row.record_value
            });
          }
          return callback(null, changes);
        });
      }
    };
  };

  newSQLiteDataStorage = function(dbname, opt_mode) {
    return newSQLiteDataStorageWrapper(!!opt_mode ? new sqlite3.Database(dbname, opt_mode) : new sqlite3.Database(dbname));
  };

  module.exports = {
    newSQLiteDataStorage: newSQLiteDataStorage
  };

}).call(this);
